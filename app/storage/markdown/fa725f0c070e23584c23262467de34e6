<h1>validUpload</h1>

<h2>Description</h2>

<p>validUpload est basé sur plupload et validationEngine et twitter bootsrap.
Ce dernier est fait pour faciliter l'utilisation et la réutilisation des deux javascript.</p>

<ul>
<li><code>validationEngine</code> pour la gestion des erreurs</li>
<li><code>plupload</code> pour la gestion des uploads</li>
<li><code>twitter bootsrap</code> pour la gestion de la barre de progression</li>
<li>Validation à l'aide de validationEngine</li>
<li>Affichage des erreurs plupload dans les éléments de validation de validationEngine</li>
<li>Instaciantion automatique ou non du template</li>
<li>Multi instances</li>
<li>Upload multiple</li>
<li>Supression dans la queue d'upload</li>
<li>Upload simple</li>
<li>Uniformise les instantiations</li>
</ul>

<h2>Demo</h2>

<p><a href="http://www.kezho.com/application/data/demo/validupload">http://www.kezho.com/application/data/demo/validupload</a></p>

<p><img src="http://www.kezho.com/application/data/demo/validupload/images/exemple.png" alt="Exemple" /></p>

<h2>Installation</h2>

<h3>Bower</h3>

<p><code>sh
    bower install</code></p>

<h4>Dépendances</h4>

<p>```json</p>

<pre><code>"jquery": "~1.10.2",
"validationEngine": "~2.6.4",
"plupload": "~2.0.0",
"bootstrap": "~3.0.0"
</code></pre>

<p>```</p>

<h2>Utilisation</h2>

<h3>Exemple d'utilisation de base</h3>

<p><img src="http://www.kezho.com/application/data/demo/validupload/images/simple.png" alt="Simple" /></p>

<p><code>html
    &lt;fieldset&gt;
         &lt;label&gt;Single upload&lt;/label&gt;
         &lt;div class="uploader_conteneur"&gt;&lt;/div&gt;
     &lt;/fieldset&gt;</code></p>

<p><code>js
         jQuery(document).ready(function () {
             jQuery('.uploader_conteneur').validUpload({
                 filters: [
                     {title: "Image files", extensions: "jpg,gif,png"},
                     {title: "Zip files", extensions: "zip"}
                 ]
             });
         });</code></p>

<h3>Exemple d'utilisation d'upload multiple</h3>

<p><img src="http://www.kezho.com/application/data/demo/validupload/images/multiple.png" alt="Multiple" /></p>

<p><code>html
    &lt;fieldset&gt;
        &lt;label&gt;Upload multiple&lt;/label&gt;
        &lt;div class="uploader_multiple"&gt;&lt;/div&gt;
    &lt;/fieldset&gt;</code></p>

<p><code>js
         jQuery('.uploader_multiple').validUpload({
             dataUploader: {
                 runtimes: 'html5,flash,html4',
                 url: 'components/plupload/examples/upload.php',
                 flash_swf_url: 'components/plupload/js/Moxie.swf',
                 chunk_size: '1mb',
                 multi_selection: true,
                 unique_names: true
             }
         });</code></p>

<h3>Exemple d'initialisation de contenu</h3>

<h4>Upload simple</h4>

<p><code>html
    &lt;fieldset&gt;
        &lt;label&gt;Upload simple&lt;/label&gt;
        &lt;div class="uploader_conteneur_defaut"&gt;&lt;/div&gt;
    &lt;/fieldset&gt;</code></p>

<p><code>js
         jQuery('.uploader_conteneur_defaut').validUpload({
             default_value:'test.jpg'
         });</code></p>

<h4>Upload multiple</h4>

<p><code>html
    &lt;fieldset&gt;
        &lt;label&gt;Upload multiple&lt;/label&gt;
        &lt;div class="uploader_multiple_default"&gt;&lt;/div&gt;
    &lt;/fieldset&gt;</code></p>

<p><code>js
         jQuery('.uploader_multiple_default').validUpload({
              dataUploader: {
                  runtimes: 'html5,flash,html4',
                  url: 'components/plupload/examples/upload.php',
                  flash_swf_url: 'components/plupload/js/Moxie.swf',
                  chunk_size: '1mb',
                  multi_selection: true,
                  unique_names: true
              },
              default_value:'test_1.jpg,test_2.png,test_3.tiff'
          });</code></p>

<h3>Events</h3>

<p>Event | Param | Description
----- | ----- | -----------
<code>onFilesAdded</code> | Uploader (up),  information sur les fichiers (file) | Appelé à chaque fois qu'une personne ajoute un fichier.
<code>onUploadProgress</code> | Uploader (up),  information sur le fichier (file) | Appelé à chaque progression de l'uplaod de fichier.
<code>onUploadInit</code> | Uploader (up), paramètre d'instanciation du composant d'upload | Appelé une fois que le composant est initialisé.
<code>onFileUploaded</code> | Uploader (up), fichier conerné (file), et les informations sur le retour de l'upload (requête) | Appelé une fois que le fichier est uploadé correctement.
<code>onUploadError</code> | Uploader (up) et l'erreur (err) | Appelé une fois qu'une erreurs est lancé par le composant plupload..
<code>onInit</code> | Instance de l'objet (this) | Appelé une fois que l'objet est fini d'être instantié.
<code>onInitTemplate</code> | Instance de l'objet (this) | Appelé une fois que le template est injecté dans son conteneur.
<code>onInitDisplay</code> | Instance de l'objet (this) | Appelé une fois que les éléments sont masqués ou affichés (remove,finished...) en fonction du contenue de l'input.
<code>onInitEvent</code> | Appelé une fois que les évnèments sont initialisés.</p>

<h4>Exemple d'implémentation d'évènement</h4>

<p>```html
    <form class="form-inline" role="form">
        <fieldset>
            <label>Event upload</label></p>

<pre><code>        &lt;div class="uploader_event"&gt;&lt;/div&gt;
    &lt;/fieldset&gt;
    &lt;hr/&gt;
    &lt;pre class="console pre-scrollable"&gt;

    &lt;/pre&gt;
&lt;/form&gt;
</code></pre>

<p>```</p>

<p>```js
    jQuery('.uploader_event').validUpload({
        onFilesAdded: function (up, file) {
            log(' ');
            log('---------------------------');
            log('START onFilesAdded');
            plupload.each(file, function (files) {
                log('File : ' + files.name);
            });
            log('END onFilesAdded');
            log('---------------------------');</p>

<pre><code>    },
    onUploadProgress: function (up, file) {
        log(' ');
        log('---------------------------');
        log('START onUploadProgress');
        log('File : ' + file.name + " ======&gt; " + file.percent + " %");
        log('END onUploadProgress');
        log('---------------------------');

    },
    onUploadInit: function (up, params) {
        log(' ');
        log('---------------------------');
        log('START onUploadInit');
        log('Runtime : ' + params.runtime);
        log('END onUploadInit');
        log('---------------------------');

    },
    onFileUploaded: function (up, file, info) {
        log(' ');
        log('---------------------------');
        log('START onFileUploaded');
        log('File : ' + file.name);
        log('END onFileUploaded');
        log('---------------------------');

    },
    onUploadError: function (up, err) {
        log(' ');
        log('---------------------------');
        log('START onFileUploaded');
        log('Error : ' + err);
        log('END onFileUploaded');
        log('---------------------------');
    },

    onInit: function (obj) {
        log(' ');
        log('---------------------------');
        log('START onInit');
        log('END onInit');
        log('---------------------------');
    },
    onInitTemplate: function (obj) {
        log(' ');
        log('---------------------------');
        log('START onInitTemplate');
        log('END onInitTemplate');
        log('---------------------------');
    },
    onInitData: function (obj) {
        log(' ');
        log('---------------------------');
        log('START onInitData');
        log('END onInitData');
        log('---------------------------');
    },
    onInitDisplay: function (obj) {
        log(' ');
        log('---------------------------');
        log('START onInitDisplay');
        log('END onInitDisplay');
        log('---------------------------');
    },
    onInitEvent: function (obj) {
        log(' ');
        log('---------------------------');
        log('START onInitEvent');
        log('END onInitEvent');
        log('---------------------------');
    }
});
</code></pre>

<p>```</p>
